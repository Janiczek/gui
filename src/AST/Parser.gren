module AST.Parser exposing (parser, testSuite)

import AST exposing (Attr, Expr(..))
import Expect
import Parser exposing ((|.), (|=), Parser)
import Parser.Extra exposing (InfixParser, InfixParserTable)
import Test exposing (Test)


spaces : Parser {}
spaces =
    Parser.chompWhile (\c -> c == ' ')


parser : Parser Expr
parser =
    parserAux 0 False


parserAux : Int -> Bool -> Parser Expr
parserAux precedence isRight =
    Parser.Extra.pratt
        { isRight = isRight
        , precedence = precedence
        , prefix = prefixExpr
        , infix = infixExpr
        }


prefixExpr : Parser Expr
prefixExpr =
    Parser.oneOf
        [ string
        , list
        , stdin
        , stdout
        , file
        , id
        , element
        ]


infixExpr : InfixParserTable Expr
infixExpr =
    [ { needs = "->", precedence = 1, isRight = True, parser = function }
    ]


location : Parser Expr
location =
    Parser.oneOf
        [ id
        , stdin
        , stdout
        , file
        ]


string : Parser Expr
string =
    Parser.succeed String
        |. Parser.token "\""
        |= Parser.loop [] stringHelp


stringHelp : Array String -> Parser (Parser.Step (Array String) String)
stringHelp chunks =
    Parser.oneOf
        [ Parser.succeed (\chunk -> Parser.Loop (Array.pushLast chunk chunks))
            |. Parser.token "\\"
            |= Parser.oneOf
                [ Parser.map (\_ -> "\n") (Parser.token "n")
                , Parser.map (\_ -> "\t") (Parser.token "t")
                , Parser.map (\_ -> "\u{000D}") (Parser.token "r")
                , Parser.map (\_ -> "\"") (Parser.token "\"")
                ]
        , Parser.token "\""
            |> Parser.map (\_ -> Parser.Done (String.join "" chunks))
        , Parser.chompWhile isUninterestingForString
            |> Parser.getChompedString
            |> Parser.map (\chunk -> Parser.Loop (Array.pushLast chunk chunks))
        ]


isUninterestingForString : Char -> Bool
isUninterestingForString char =
    char /= '\\' && char /= '"'


list : Parser Expr
list =
    Parser.map List <|
        Parser.sequence
            { start = "["
            , separator = ","
            , end = "]"
            , spaces = spaces
            , item = Parser.lazy (\{} -> parser)
            , trailing = Parser.Optional
            }


file : Parser Expr
file =
    Parser.succeed (\path -> File { path = path })
        |. Parser.token "FILE("
        |= (Parser.getChompedString (Parser.chompWhile (\c -> c /= ')'))
                |> Parser.andThen
                    (\path ->
                        let
                            trimmed =
                                String.trim path
                        in
                        if String.isEmpty trimmed then
                            Parser.problem "file"

                        else
                            Parser.succeed trimmed
                    )
           )
        |. Parser.token ")"


id : Parser Expr
id =
    Parser.succeed Id
        |. Parser.token "#"
        |= identifier


stdin : Parser Expr
stdin =
    Parser.succeed Stdin
        |. Parser.token "STDIN"


stdout : Parser Expr
stdout =
    Parser.succeed Stdout
        |. Parser.token "STDOUT"


function : InfixParser Expr
function config =
    Parser.succeed (\dst -> Function { src = config.left, dst = dst })
        |= location


element : Parser Expr
element =
    Parser.succeed
        (\name id_ maybeAttrs child ->
            Element
                { name = name
                , id = id_
                , attrs =
                    maybeAttrs
                        |> Maybe.withDefault []
                , child = child
                }
        )
        |= identifier
        |= maybe
            (Parser.succeed identity
                |. Parser.token "#"
                |= identifier
            )
        |= maybe
            (Parser.sequence
                { start = "("
                , separator = ","
                , end = ")"
                , spaces = spaces
                , item = Parser.lazy (\{} -> attr)
                , trailing = Parser.Optional
                }
            )
        |= maybe
            (Parser.succeed identity
                |. Parser.token ":"
                |= Parser.lazy (\{} -> parser)
            )


attr : Parser Attr
attr =
    Parser.succeed (\name value -> { name = name, value = value })
        |= identifier
        |. Parser.token ":"
        |= Parser.lazy (\{} -> parser)


maybe : Parser a -> Parser (Maybe a)
maybe p =
    Parser.oneOf
        [ Parser.map Just p
        , Parser.succeed Nothing
        ]


isFirstIdentifierChar : Char -> Bool
isFirstIdentifierChar c =
    Char.isLower c || Char.isDigit c || c == '_'


isNonfirstIdentifierChar : Char -> Bool
isNonfirstIdentifierChar c =
    Char.isAlphaNum c || c == '_'


identifier : Parser String
identifier =
    (Parser.succeed (\first rest -> String.append rest first)
        |= Parser.getChompedString (Parser.chompIf isFirstIdentifierChar)
        |= Parser.getChompedString (Parser.chompWhile isNonfirstIdentifierChar)
    )
        |> Parser.andThen
            (\id_ ->
                if String.isEmpty (String.trim id_) then
                    Parser.problem "identifier"

                else
                    Parser.succeed (String.trim id_)
            )



-- TESTS


testSuite : Test
testSuite =
    Test.describe "AST.Parser"
        [ stringTests
        , listTests
        , idTests
        , stdinTests
        , stdoutTests
        , fileTests
        , elementTests
        , functionTests
        , readmeExamples
        ]


testCase : { input : String, expected : Expr } -> Test
testCase { input, expected } =
    Test.test input <|
        \_ ->
            input
                |> Parser.run parser
                |> Expect.equal (Ok expected)


maybeTestCase : { input : String, expected : Maybe Expr } -> Test
maybeTestCase { input, expected } =
    Test.test input <|
        \_ ->
            input
                |> Parser.run parser
                |> (when expected is
                        Nothing ->
                            Expect.err

                        Just e ->
                            Expect.equal (Ok e)
                   )


stdinTests : Test
stdinTests =
    Test.describe "stdin parser"
        [ testCase { input = "STDIN", expected = Stdin } ]


stdoutTests : Test
stdoutTests =
    Test.describe "stdout parser"
        [ testCase { input = "STDOUT", expected = Stdout } ]


fileTests : Test
fileTests =
    Test.describe "file parser" <|
        Array.map maybeTestCase
            [ { input = "FILE(a.txt)", expected = Just (File { path = "a.txt" }) }
            , { input = "FILE(path/to/a.txt)", expected = Just (File { path = "path/to/a.txt" }) }
            , { input = "FILE(path\\to\\a.txt)", expected = Just (File { path = "path\\to\\a.txt" }) }
            , { input = "FILE()", expected = Nothing }
            , { input = "File(a.txt)", expected = Nothing }
            , { input = "File()", expected = Nothing }
            ]


stringTests : Test
stringTests =
    Test.describe "string" <|
        Array.map testCase
            [ { input = "\"a\"", expected = String "a" }
            , { input = "\"\"", expected = String "" }
            , { input = "\"\\\"\"", expected = String "\"" }
            , { input = "\"\\n\"", expected = String "\n" }
            , { input = "\"\\r\""
              , expected =
                    String
                        """
"""
              }
            , { input = "\"\\t\"", expected = String "\t" }
            ]


listTests : Test
listTests =
    Test.describe "list" <|
        Array.map testCase
            [ { input = "[]", expected = List [] }
            , { input = "[\"\"]", expected = List [ String "" ] }
            , { input = "[\"a\",\"b\"]", expected = List [ String "a", String "b" ] }
            ]


elementTests : Test
elementTests =
    Test.describe "element" <|
        Array.map testCase
            -- button
            [ { input = "button", expected = Element { name = "button", id = Nothing, attrs = [], child = Nothing } }
            , { input = "button#b1", expected = Element { name = "button", id = Just "b1", attrs = [], child = Nothing } }
            , { input = "button#b_1", expected = Element { name = "button", id = Just "b_1", attrs = [], child = Nothing } }
            , { input = "button#1", expected = Element { name = "button", id = Just "1", attrs = [], child = Nothing } }
            , { input = "button#1_b", expected = Element { name = "button", id = Just "1_b", attrs = [], child = Nothing } }
            , { input = "button:\"Hello\"", expected = Element { name = "button", id = Nothing, attrs = [], child = Just (String "Hello") } }
            , { input = "button#b1:\"Hello\"", expected = Element { name = "button", id = Just "b1", attrs = [], child = Just (String "Hello") } }
            , { input = "button:label:\"Hello\"", expected = Element { name = "button", id = Nothing, attrs = [], child = Just (Element { name = "label", id = Nothing, attrs = [], child = Just (String "Hello") }) } }
            , { input = "button(bgcolor:\"red\")", expected = Element { name = "button", id = Nothing, attrs = [ { name = "bgcolor", value = String "red" } ], child = Nothing } }
            , -- label
              { input = "label:\"Hello\"", expected = Element { name = "label", id = Nothing, attrs = [], child = Just (String "Hello") } }
            , { input = "label#l1", expected = Element { name = "label", id = Just "l1", attrs = [], child = Nothing } }
            , { input = "label(fgcolor:\"red\")", expected = Element { name = "label", id = Nothing, attrs = [ { name = "fgcolor", value = String "red" } ], child = Nothing } }
            , -- input
              { input = "input(placeholder:\"Hello\")", expected = Element { name = "input", id = Nothing, attrs = [ { name = "placeholder", value = String "Hello" } ], child = Nothing } }
            , -- row,col
              { input = "row:[label:\"Hello\", input:\"World\"]", expected = Element { name = "row", id = Nothing, attrs = [], child = Just (List [ Element { name = "label", id = Nothing, attrs = [], child = Just (String "Hello") }, Element { name = "input", id = Nothing, attrs = [], child = Just (String "World") } ]) } }
            , { input = "col:[label:\"Hello\", input:\"World\"]", expected = Element { name = "col", id = Nothing, attrs = [], child = Just (List [ Element { name = "label", id = Nothing, attrs = [], child = Just (String "Hello") }, Element { name = "input", id = Nothing, attrs = [], child = Just (String "World") } ]) } }
            , -- cases
              { input = "camelCase", expected = Element { name = "camelCase", id = Nothing, attrs = [], child = Nothing } }
            , { input = "btn0", expected = Element { name = "btn0", id = Nothing, attrs = [], child = Nothing } }
            , { input = "btn_0", expected = Element { name = "btn_0", id = Nothing, attrs = [], child = Nothing } }
            , { input = "0", expected = Element { name = "0", id = Nothing, attrs = [], child = Nothing } }
            , { input = "0b", expected = Element { name = "0b", id = Nothing, attrs = [], child = Nothing } }
            , { input = "0_b", expected = Element { name = "0_b", id = Nothing, attrs = [], child = Nothing } }
            ]


functionTests : Test
functionTests =
    Test.describe "function" <|
        Array.map testCase
            [ { input = "#name->STDOUT", expected = Function { src = Id "name", dst = Stdout } }
            , { input = "#x->#name", expected = Function { src = Id "x", dst = Id "name" } }
            , { input = "#name->FILE(output.txt)", expected = Function { src = Id "name", dst = File { path = "output.txt" } } }
            ]


idTests : Test
idTests =
    Test.describe "id" <|
        Array.map testCase
            [ { input = "#name", expected = Id "name" }
            , { input = "#x", expected = Id "x" }
            , { input = "#x_1", expected = Id "x_1" }
            , { input = "#_1", expected = Id "_1" }
            , { input = "#_x", expected = Id "_x" }
            , { input = "#_X", expected = Id "_X" }
            , { input = "#1x", expected = Id "1x" }
            , { input = "#1", expected = Id "1" }
            ]


readmeExamples : Test
readmeExamples =
    Test.describe "readme examples" <|
        Array.map testCase
            [ { input = "label:\"XYZ\"", expected = Element { name = "label", id = Nothing, attrs = [], child = Just (String "XYZ") } }
            , { input = "textarea:STDIN", expected = Element { name = "textarea", id = Nothing, attrs = [], child = Just Stdin } }
            , { input = "textarea:FILE(x.txt)", expected = Element { name = "textarea", id = Nothing, attrs = [], child = Just (File { path = "x.txt" }) } }
            , { input =
                    """
                        col:[label:"Your name:", input#name, button(onclick:#name->STDOUT):"Submit"]
                        """
              , expected =
                    Element
                        { name = "col"
                        , id = Nothing
                        , attrs = []
                        , child =
                            Just
                                (List
                                    [ Element { name = "label", id = Nothing, attrs = [], child = Just (String "Your name:") }
                                    , Element { name = "input", id = Just "name", attrs = [], child = Nothing }
                                    , Element { name = "button", id = Nothing, attrs = [ { name = "onclick", value = Function { src = Id "name", dst = Stdout } } ], child = Just (String "Submit") }
                                    ]
                                )
                        }
              }
            , { input = "input#name(oninput:#name->STDOUT):\"Init value\"", expected = Element { name = "input", id = Just "name", attrs = [ { name = "oninput", value = Function { src = Id "name", dst = Stdout } } ], child = Just (String "Init value") } }
            ]
