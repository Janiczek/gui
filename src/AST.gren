module AST exposing (Attr, Expr(..), testSuite, toTclTk)

import Expect
import Test exposing (Test)


type Expr
    = String String
    | List (Array Expr)
    | Element
        { name : String
        , id : Maybe String
        , attrs : Array Attr
        , child : Maybe Expr
        }
    | Stdin
    | Stdout
    | File { path : String }
    | Id String
    | Function
        { src : Expr
        , dst : Expr
        }


type alias Attr =
    { name : String
    , value : Expr
    }


toTclTk : Expr -> String
toTclTk expr =
    let
        _ =
            Debug.log "TODO toTclTk" {}
    in
    """
    set text Hello
    proc doIt {widget} {
        global text
        if {$text == "Hello"} {
            set text "Goodbye"
        } else {
            set text "Hello"
        }
        $widget configure -text $text
    }

    button .b1 -text "Hello" \\
            -command "doIt .b1"
    button .b2 -text "Quit" \\
        -command "destroy ."

    # Put them in the window in row order
    grid .b1 -row 0 -column 0
    grid .b2 -row 0 -column 1
    """



-- TESTS


testSuite : Test
testSuite =
    Test.describe "AST"
        [ toTclTkTests
        ]


toTclTkTests : Test
toTclTkTests =
    Test.describe "toTclTk"
        [ test (Element { name = "label", id = Nothing, attrs = [], child = Just (String "XYZ") })
            """
            label ._auto1 -text "XYZ"
            grid ._auto1 -row 0
            """
        ]


test : Expr -> String -> Test
test input output =
    Test.test (Debug.toString input) <|
        \_ ->
            toTclTk input
                |> Expect.equal output
