module AST exposing (Attr, Expr(..), testSuite, toTclTk)

import Expect
import Test exposing (Test)


type Expr
    = String String
    | List (Array Expr)
    | Element
        { name : String
        , id : Maybe String
        , attrs : Array Attr
        , child : Maybe Expr
        }
    | Stdin
    | Stdout
    | File { path : String }
    | Id String
    | Function
        { src : Expr
        , dst : Expr
        }


type alias Attr =
    { name : String
    , value : Expr
    }



-- TO TCL/TK


toTclTk : Expr -> String
toTclTk expr =
    """
    set text Hello
    proc doIt {widget} {
        global text
        if {$text == "Hello"} {
            set text "Goodbye"
        } else {
            set text "Hello"
        }
        $widget configure -text $text
    }

    button .b1 -text "Hello" \\
            -command "doIt .b1"
    button .b2 -text "Quit" \\
        -command "destroy ."

    # Put them in the window in row order
    grid .b1 -row 0 -column 0
    grid .b2 -row 0 -column 1
    """



-- TO STRING


toString : Expr -> String
toString expr =
    when expr is
        String str ->
            "\"" ++ String.replace "\"" "\\\"" str ++ "\""

        List list ->
            wrapWith "["
                "]"
                (list
                    |> Array.map toString
                    |> String.join ","
                )

        Element element ->
            [ Just element.name
            , element.id |> Maybe.map (\id -> "#" ++ id)
            , element.attrs
                |> Array.map (\attr -> attr.name ++ ":" ++ toString attr.value)
                |> String.join ","
                |> ifEmpty (wrapWith "(" ")")
            , element.child |> Maybe.map (\child -> " " ++ toString child)
            ]
                |> Array.mapAndKeepJust identity
                |> String.join ""

        Stdin ->
            "STDIN"

        Stdout ->
            "STDOUT"

        File { path } ->
            "FILE(" ++ path ++ ")"

        Id id ->
            "#" ++ id

        Function { src, dst } ->
            toString src ++ "->" ++ toString dst


wrapWith : String -> String -> String -> String
wrapWith prefix suffix str =
    prefix ++ " " ++ str ++ " " ++ suffix


ifEmpty : (String -> String) -> String -> Maybe String
ifEmpty f str =
    if str == "" then
        Nothing

    else
        Just (f str)



-- TESTS


testSuite : Test
testSuite =
    Test.describe "AST"
        [ toTclTkTests
        ]


toTclTkTests : Test
toTclTkTests =
    Test.describe "toTclTk"
        [ test (Element { name = "label", id = Nothing, attrs = [], child = Just (String "XYZ") })
            """
            label ._auto1 -text "XYZ"
            grid ._auto1 -row 0
            """
        ]


test : Expr -> String -> Test
test input output =
    Test.test (toString input) <|
        \_ ->
            toTclTk input
                |> Expect.equal output
