module AST exposing (Expr(..), el, getInt, toString)

import Array.Extra
import Dict exposing (Dict)
import Dict.Extra
import Expect
import Result.Extra
import Set exposing (Set)
import String.Extra
import Test exposing (Test)


type Expr
    = String String
    | Int Int
    | List (Array Expr)
    | Element
        { name : String
        , id : Maybe String
        , attrs : Dict String Expr
        , child : Maybe Expr
        }
    | Stdin
    | Stdout
    | Stderr
    | File { path : String }
    | Id String
    | Function
        { src : Expr
        , dst : Expr
        }


getInt : Expr -> Maybe Int
getInt expr =
    when expr is
        Int int ->
            Just int

        _ ->
            Nothing



-- TO STRING


toString : Expr -> String
toString expr =
    when expr is
        String str ->
            "\"" ++ String.replace "\"" "\\\"" str ++ "\""

        Int int ->
            String.fromInt int

        List list ->
            String.Extra.wrapWith
                "["
                "]"
                (list
                    |> Array.map toString
                    |> String.join ","
                )

        Element element ->
            [ Just element.name
            , element.id |> Maybe.map (\id -> "#" ++ id)
            , element.attrs
                |> Dict.Extra.toArray
                |> Array.map (\{ key, value } -> key ++ ":" ++ toString value)
                |> String.join ","
                |> ifEmpty (String.Extra.wrapWith "(" ")")
            , element.child |> Maybe.map (\child -> " " ++ toString child)
            ]
                |> Array.mapAndKeepJust identity
                |> String.join ""

        Stdin ->
            "STDIN"

        Stdout ->
            "STDOUT"

        Stderr ->
            "STDERR"

        File { path } ->
            "FILE(" ++ path ++ ")"

        Id id ->
            "#" ++ id

        Function { src, dst } ->
            toString src ++ "->" ++ toString dst


ifEmpty : (String -> String) -> String -> Maybe String
ifEmpty f str =
    if str == "" then
        Nothing

    else
        Just (f str)


el : String -> Expr -> Expr
el name expr =
    Element
        { name = name
        , id = Nothing
        , attrs = Dict.empty
        , child = Just expr
        }
